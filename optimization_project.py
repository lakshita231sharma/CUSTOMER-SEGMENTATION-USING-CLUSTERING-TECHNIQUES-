# -*- coding: utf-8 -*-
"""optimization_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aqqtVutInZta4YSFqJzad-v-ZEsbMTbf
"""

import numpy as np
import pandas as pd

# Set a random seed for reproducibility
np.random.seed(42)

# Generate random data for 20 products
num_products = 20

# Define the ranges for each attribute
weekly_demand = np.random.randint(50, 150, size=num_products)  # Weekly demand between 50 and 150
current_inventory = np.random.randint(30, 100, size=num_products)  # Current inventory between 30 and 100
max_capacity = np.random.randint(120, 200, size=num_products)  # Max capacity between 120 and 200
holding_cost = np.random.uniform(0.3, 0.6, size=num_products)  # Holding cost between 0.3 and 0.6
order_cost = np.random.uniform(0.8, 1.5, size=num_products)  # Order cost between 0.8 and 1.5
budget = np.random.randint(50, 100, size=num_products)  # Budget between 50 and 100

# Generate product names (Product_1, Product_2, ..., Product_20)
products = [f"Product_{i+1}" for i in range(num_products)]

# Create a pandas DataFrame
data = pd.DataFrame({
    "Product": products,
    "Weekly_Demand": weekly_demand,
    "Current_Inventory": current_inventory,
    "Max_Capacity": max_capacity,
    "Holding_Cost": holding_cost,
    "Order_Cost": order_cost,
    "Budget": budget
})

# Print the generated dataset
print(data)

# Save the dataset to a CSV file
data.to_csv('inventory_dataset.csv', index=False)

# If you want to save it in Excel format, you can use the following:
# data.to_excel('inventory_dataset.xlsx', index=False)

print("Dataset saved as 'inventory_dataset.csv'")

import numpy as np
import pandas as pd
from scipy.optimize import least_squares

# Load the dataset from the CSV file
data = pd.read_csv('inventory_dataset.csv')

# Define the function f(x) = 0 based on the given equations
def inventory_constraints(order_quantities, data):
    n_products = len(data)  # Number of products
    constraints = []

    for i in range(n_products):
        order_quantity = order_quantities[i]

        # Get the data for the i-th product
        weekly_demand = data["Weekly_Demand"][i]
        current_inventory = data["Current_Inventory"][i]
        max_capacity = data["Max_Capacity"][i]
        holding_cost = data["Holding_Cost"][i]
        order_cost = data["Order_Cost"][i]
        budget = data["Budget"][i]

        # Define the equations for each product
        f1 = weekly_demand - (current_inventory + order_quantity)  # Balance for the product
        f2 = current_inventory + order_quantity - max_capacity      # Capacity for the product
        f3 = (holding_cost * current_inventory + order_cost * order_quantity) - budget  # Cost for the product

        constraints.extend([f1, f2, f3])

    return constraints

# Initial guesses for the order quantities for all products (start with a small number for each product)
initial_guess = np.ones(len(data)) * 10  # Initial guess for order quantities for all products

# Solve the system of equations for all products
solution = least_squares(inventory_constraints, initial_guess, args=(data,))

# Extract the optimal order quantities for all products
order_quantities = solution.x

# Create a results dictionary with the optimal order quantities for each product
results = {data["Product"][i]: order_quantities[i] for i in range(len(data))}

# Print the results
for product, order_quantity in results.items():
    print(f"Optimal Order Quantity for {product}: {order_quantity}")